package com.pat.DAOImp;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import com.pat.DAO.eventDAO;
import com.pat.modren.event;

public class eventDAOImp implements eventDAO {

    // Database connection details
	private int lastGeneratedOrderId;
    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/e_book";
    private static final String JDBC_USER = "root";
    private static final String JDBC_PASSWORD = "root";

    private static final String INSERT_EVENT_SQL = "INSERT INTO event (eventname, description, start_date, end_date, venuname, address, total_seataval, event_img,price) VALUES (?, ?, ?, ?, ?, ?, ?, ?,?)";
    private static final String SELECT_EVENT_BY_ID = "SELECT eventid FROM event WHERE eventname = ?";
    private static final String SELECT_ALL_EVENTS = "SELECT * FROM event";
    private static final String UPDATE_EVENT_SQL = "UPDATE event SET eventname = ?, description = ?, start_date = ?, end_date = ?, venuname = ?, address = ?, total_seataval = ?, event_img = ?,price=? WHERE eventid = ?";
    private static final String DELETE_EVENT_SQL = "DELETE FROM event WHERE eventid = ?";

    @Override
    public void save(event event) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (Connection con = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
                 PreparedStatement stmt = con.prepareStatement(INSERT_EVENT_SQL,Statement.RETURN_GENERATED_KEYS)) {
                stmt.setString(1, event.getEventname());
                stmt.setString(2, event.getDescription());
                stmt.setString(3, event.getStart_date());
                stmt.setString(4, event.getEnd_date());
                stmt.setString(5, event.getVenuname());
                stmt.setString(6, event.getAddress());
                stmt.setInt(7, event.getTotal_seataval());
                stmt.setString(8, event.getEvent_img());
                stmt.setDouble(9, event.getPrice());
                
                int i = stmt.executeUpdate();
                
                
                try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int generatedId = generatedKeys.getInt(1);
                        event.setEventid(generatedId);
                        System.out.println("Generated Event ID: " + generatedId);
                    }
                }
                if(i>0) {
                	System.out.println("good ");
                }else {
                	System.out.println("Bad");
                }
                
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            
        }
    }
    
    @Override
    public int retrieveAutoGeneratedOrderId() {
        return lastGeneratedOrderId;
    }

    @Override
    public int getEventById(String eventname) {
    	int eventId = -1; // Initialize eventId

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (Connection con = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
                 PreparedStatement stmt = con.prepareStatement(SELECT_EVENT_BY_ID)) {

                // Set parameter for the prepared statement
                stmt.setString(1, eventname);

                // Execute the query
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        eventId = rs.getInt("eventid");
                    }
                }
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }

        return eventId;
        }

    @Override
    public List<event> getAllEvents() {
        List<event> events = new ArrayList<>();
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (Connection con = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
                 PreparedStatement stmt = con.prepareStatement(SELECT_ALL_EVENTS);
                 ResultSet resultSet = stmt.executeQuery()) {

                while (resultSet.next()) {
                    event event = new event();
                    event.setEventid(resultSet.getInt("eventid"));
                    event.setEventname(resultSet.getString("eventname"));
                    event.setDescription(resultSet.getString("description"));
                    event.setStart_date(resultSet.getString("start_date"));
                    event.setEnd_date(resultSet.getString("end_date"));
                    event.setVenuname(resultSet.getString("venuname"));
                    event.setAddress(resultSet.getString("address"));
                    event.setTotal_seataval(resultSet.getInt("total_seataval"));
                    event.setPrice(resultSet.getDouble("price"));
                    event.setEvent_img(resultSet.getString("event_img"));
                    events.add(event);
                }
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return events;
    }

    public void update(event eve)  {
    	
        boolean updated = false;
		try (Connection con = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
             PreparedStatement stmt = con.prepareStatement(UPDATE_EVENT_SQL)) {
            
        	stmt.setString(1, eve.getEventname());
            stmt.setString(2, eve.getDescription());
            stmt.setString(3, eve.getStart_date());
            stmt.setString(4, eve.getEnd_date());
            stmt.setString(5, eve.getVenuname());
            stmt.setString(6, eve.getAddress());
            stmt.setInt(7, eve.getTotal_seataval());
            stmt.setString(8, eve.getEvent_img());
            stmt.setDouble(9, eve.getPrice());
            stmt.setInt(10, eve.getEventid());
            
            System.out.println("Update Method"+eve.getEventid());
        	
            
            
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                updated = true;
            }
        }  catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void delete(int eventid) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (Connection con = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
                 PreparedStatement stmt = con.prepareStatement(DELETE_EVENT_SQL)) {
                stmt.setInt(1, eventid);
                int i = stmt.executeUpdate();
                if(i>0) {
                	System.out.println("good");
                }else {
                	System.out.println("Bad");
                }
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
           
        }
    }
    
    @Override
    public event getEventById(int eventId) throws SQLException {
        event eve = null;
        String query = "SELECT * FROM event WHERE eventid = ?";
        
        try (Connection connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            
            preparedStatement.setInt(1, eventId);
            ResultSet resultSet = preparedStatement.executeQuery();
            
            if (resultSet.next()) {
                eve = new event();
                eve.setEventid(resultSet.getInt("eventid"));
                eve.setEventname(resultSet.getString("eventname"));
                eve.setDescription(resultSet.getString("description"));
                eve.setStart_date(resultSet.getString("start_date"));
                eve.setEnd_date(resultSet.getString("end_date"));
                eve.setVenuname(resultSet.getString("venuname"));
                eve.setAddress(resultSet.getString("address"));
                eve.setTotal_seataval(resultSet.getInt("total_seataval"));
                eve.setPrice(resultSet.getDouble("price"));
                eve.setEvent_img(resultSet.getString("event_img"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new SQLException("Error retrieving event by ID", e);
        }
        
        return eve;
    }

	}

